import jenkins.model.*
import hudson.model.*
import groovy.json.JsonOutput

def thresholdMillis = 2 * 60 * 60 * 1000 // 2 hours
def slackWebhook = 'https://hooks.slack.com/services/XXXX/YYYY/ZZZZ' // Replace with your actual Slack webhook

def now = System.currentTimeMillis()

Jenkins.instance.getAllItems(Job).each { job ->
    job.builds.findAll { build ->
        build.isBuilding() && (now - build.getStartTimeInMillis()) > thresholdMillis
    }.each { longBuild ->
        def durationMillis = now - longBuild.getStartTimeInMillis()
        def durationMins = (durationMillis / 1000 / 60).intValue()

        def jobName = longBuild.fullDisplayName
        def userId = longBuild.getCauses().find { it instanceof Cause.UserIdCause }?.userId ?: "Unknown"
        def userName = longBuild.getCauses().find { it instanceof Cause.UserIdCause }?.userName ?: "Unknown"

        def message = """*Alert:* Jenkins job running too long!
*Job:* ${jobName}
*Started by:* ${userName} (${userId})
*Duration:* ${durationMins} minutes"""

        def payload = JsonOutput.toJson([text: message])

        def conn = new URL(slackWebhook).openConnection()
        conn.setRequestMethod("POST")
        conn.doOutput = true
        conn.setRequestProperty("Content-Type", "application/json")
        conn.outputStream.withWriter("UTF-8") { writer ->
            writer.write(payload)
        }

        println "Alert sent for job: ${jobName}"
    }
}






import jenkins.model.*
import hudson.model.*
import javax.mail.*
import javax.mail.internet.*
import java.util.Properties

// === CONFIG ===
def thresholdMillis = 2 * 60 * 60 * 1000  // 2 hours
def emailRecipient = 'team@example.com'  // <-- Replace with your recipient email

def now = System.currentTimeMillis()

Jenkins.instance.getAllItems(Job).each { job ->
    job.builds.findAll { build ->
        build.isBuilding() && (now - build.getStartTimeInMillis()) > thresholdMillis
    }.each { longBuild ->
        def durationMillis = now - longBuild.getStartTimeInMillis()
        def durationMins = (durationMillis / 1000 / 60).intValue()

        def jobName = longBuild.fullDisplayName
        def userCause = longBuild.getCauses().find { it instanceof Cause.UserIdCause }
        def userId = userCause?.userId ?: "Unknown"
        def userName = userCause?.userName ?: "Unknown"

        def buildUrl = "${Jenkins.instance.rootUrl}${longBuild.url}"
        def subject = "ALERT: Jenkins job running > 2 hours - ${jobName}"
        def body = """\
Jenkins Job Alert:

Job Name: ${jobName}
Triggered By: ${userName} (${userId})
Running Time: ${durationMins} minutes
Build URL: ${buildUrl}
"""

        // Get admin address from Jenkins config
        def mailConfig = Jenkins.instance.getDescriptor("hudson.tasks.Mailer")
        def adminEmail = mailConfig?.adminAddress ?: "jenkins@example.com"

        // Create and send the email
        def props = new Properties()
        def session = Session.getDefaultInstance(props, null)
        def message = new MimeMessage(session)

        message.setFrom(new InternetAddress(adminEmail))
        message.addRecipient(Message.RecipientType.TO, new InternetAddress(emailRecipient))
        message.setSubject(subject)
        message.setText(body)

        Transport.send(message)
        println "Email alert sent for long-running job: ${jobName}"
    }
}
